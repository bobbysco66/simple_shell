#include "shell.h"
/**
 * _parser - this will split the string by a delimiter
 *
 */
char **_parser(char *str,const char *delims)
{
  char *token = strtok(str, delims); /*use string token function to split the string and get the first token*/
  int counter = 0;
  int toklen = _strlen(token);
  char **array = malloc(sizeof(char *) * toklen); /*this array is where the split strings will be stored*/
  array[counter]= _strdup(token); /*put token in first index of array*/
  counter++;
 while (token != NULL)
    {
      /*get the next string in line*/
      token = strtok(NULL, delims);
      array = _realloc(array,(sizeof(char *)* toklen), (sizeof(char *) * (toklen+_strlen(token))));
      toklen = toklen + _strlen(token);
      array[counter]=_strdup(token);
      counter++;
    }
	return (array);
}

/**
 * _realloc - Reallocates memory block
 * @ptr: previous pointer
 * @old_size: old size of previous pointer
 * @new_size: new size for our pointer
 * Return: New resized Pointer
 */

void *_realloc(void *ptr, unsigned int old_size, unsigned int new_size)
{
  char *new;
  char *old;

  unsigned int i;

  if (ptr == NULL)
    return (malloc(new_size));

  if (new_size == old_size)
    return (ptr);

  if (new_size == 0 && ptr != NULL)
    {
      free(ptr);
      return (NULL);
    }

  new = malloc(new_size);
  old = ptr;
  if (new == NULL)
    return (NULL);

  if (new_size > old_size)
    {
      for (i = 0; i < old_size; i++)
	new[i] = old[i];
      free(ptr);
      for (i = old_size; i < new_size; i++)
	new[i] = '\0';
    }
  if (new_size < old_size)
    {
      for (i = 0; i < new_size; i++)
	new[i] = old[i];
      free(ptr);
    }
  return (new);
}

/**
 *_strlen - Entry point
 *@s:  is the int that will use for the argument of the function
 * Return: Always 0 (Success)
 */
int _strlen(char *s)
{
  int c = 0;
  while (*s != '\0')
    {
      c++;
      s++;
    }
  return (c);
}

/**
 * _strdup - create an array of chars
 * @str: size of the memory to print
 *
 * Return: a pointer of array or NULL if it fails
 */
 char *_strdup(char *str)
 {
   char *dup;
   int i;
   int m = 0;
   if (str == NULL)
     {
       return (NULL);
     }
   i = _strlen(str) + 1;
   dup = malloc(_strlen(str) + 1);
   if (dup == NULL)
     {
       return (NULL);
     }
   else
     {
       while (m <= i)
	 {
	   dup[m] = str[m];
	   m++;
	 }
     }
   return (dup);
 }
